{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "WebFetch(domain:docs.nats.io)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__nats__kv_put",
      "mcp__nats__kv_get",
      "mcp__zen__chat",
      "Bash(find:*)",
      "Bash(nats kv get:*)",
      "Bash(/dev/null)",
      "Bash(nats kv:*)",
      "Bash(chmod:*)",
      "Bash(./scripts/peer/setup-kv-bucket.sh:*)",
      "Bash(./scripts/peer/parse-arguments.sh:*)",
      "Bash(cat:*)",
      "Bash(./scripts/peer/determine-context.sh:*)",
      "Bash(./scripts/peer/initialize-cycle.sh:*)",
      "Bash(./scripts/peer/finalize-cycle.sh:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "mcp__zen__challenge",
      "mcp__zen__thinkdeep",
      "Bash(cp:*)",
      "Bash(TEST_KEY=\"test.wrapper.validation.cycle.1\")",
      "Bash(TEST_JSON='{\n  \"\"version\"\": 1,\n  \"\"cycle_id\"\": \"\"test.wrapper.validation.cycle.1\"\",\n  \"\"metadata\"\": {\n    \"\"instruction_name\"\": \"\"test-instruction\"\",\n    \"\"key_prefix\"\": \"\"test.wrapper.validation\"\",\n    \"\"cycle_number\"\": 1,\n    \"\"created_at\"\": \"\"2025-08-06T10:00:00Z\"\",\n    \"\"updated_at\"\": \"\"2025-08-06T10:00:00Z\"\",\n    \"\"status\"\": \"\"INITIALIZED\"\",\n    \"\"current_phase\"\": \"\"plan\"\"\n  },\n  \"\"context\"\": {\n    \"\"peer_mode\"\": \"\"new\"\",\n    \"\"spec_aware\"\": false,\n    \"\"user_requirements\"\": \"\"Test wrapper scripts\"\"\n  },\n  \"\"phases\"\": {\n    \"\"plan\"\": {\"\"status\"\": \"\"pending\"\"},\n    \"\"execute\"\": {\"\"status\"\": \"\"pending\"\"},\n    \"\"express\"\": {\"\"status\"\": \"\"pending\"\"},\n    \"\"review\"\": {\"\"status\"\": \"\"pending\"\"}\n  }\n}')",
      "Bash(__NEW_LINE__ echo \"=== Testing create-state.sh with new key ===\")",
      "Bash(./scripts/peer/create-state.sh:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(./scripts/peer/update-state.sh:*)",
      "Bash(./scripts/peer/read-state.sh:*)",
      "Bash(# Simulate revision mismatch by updating twice quickly\n./scripts/peer/update-state.sh \"\"test.wrapper.validation.cycle.1\"\" ''.metadata.status = \"\"TEST1\"\"'' > /dev/null 2>&1\n./scripts/peer/update-state.sh \"\"test.wrapper.validation.cycle.1\"\" ''.metadata.status = \"\"TEST2\"\"'' > /dev/null 2>&1 &\n./scripts/peer/update-state.sh \"\"test.wrapper.validation.cycle.1\"\" ''.metadata.status = \"\"TEST3\"\"'' 2>&1 | grep -A3 \"\"revision mismatch\"\"\necho \"\"Exit code test: $?\"\")",
      "Bash(# Test small JSON shows full content\nSMALL_JSON=''{\"\"test\"\": \"\"small\"\"}''\n./scripts/peer/create-state.sh \"\"test.small.json\"\" \"\"$SMALL_JSON\"\" 2>&1 | grep -A10 \"\"Full JSON:\"\" | head -5)",
      "Bash(# Test 9.14.4: Verify final state integrity\nTEST_KEY=\"\"test.peer.cycle.complete\"\"\nFINAL_STATE=$(./scripts/peer/read-state.sh \"\"$TEST_KEY\"\" 2>/dev/null)\n\n# Check all expected fields are present and correct\necho \"\"$FINAL_STATE\"\" | jq -r ''\n  \"\"Version: \"\" + (.version | tostring),\n  \"\"Status: \"\" + .metadata.status,\n  \"\"Current Phase: \"\" + .metadata.current_phase,\n  \"\"Plan Status: \"\" + .phases.plan.status,\n  \"\"Execute Status: \"\" + .phases.execute.status,\n  \"\"Express Status: \"\" + .phases.express.status,\n  \"\"Review Status: \"\" + .phases.review.status,\n  \"\"Files Created: \"\" + (.phases.execute.output.files_created | join(\"\", \"\"))\n'')"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "nats"
  ]
}